# rotation.pyi
from __future__ import annotations
import numpy as np

class Rotation:
    @staticmethod
    def from_quat(quat: np.ndarray) -> Rotation: ...
    
    @staticmethod
    def from_euler(seq: str, angles: list[float] | np.ndarray, degrees: bool = False) -> Rotation: ...
    
    @staticmethod
    def from_matrix(matrix: np.ndarray) -> Rotation: ...
    
    @staticmethod
    def from_rotvec(rotvecs: np.ndarray) -> Rotation: ...
    
    def as_quat(self) -> np.ndarray: ...
    
    def as_euler(self, seq: str, degrees: bool = False) -> np.ndarray: ...
    
    def as_matrix(self) -> np.ndarray: ...
    
    def as_rotvec(self) -> np.ndarray: ...
    
    def apply(self, vectors: np.ndarray, inverse: bool = False) -> np.ndarray: ...
    
    def inv(self) -> Rotation: ...
    
    def __mul__(self, other: Rotation) -> Rotation: ...
    
    def mean(self, weights: np.ndarray | None = None) -> Rotation: ...
    
    def magnitude(self) -> np.ndarray: ...
    
    def __getitem__(self, index: int | slice) -> Rotation: ...
    
    def __len__(self) -> int: ...


class Slerp:
    def __init__(self, times: np.ndarray, rotations: Rotation): ...
    
    def __call__(self, times: float | list[float] | np.ndarray) -> Rotation: ...
